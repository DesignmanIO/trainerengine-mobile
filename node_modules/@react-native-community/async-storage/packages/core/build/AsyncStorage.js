"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defaults = require("./defaults");

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class AsyncStorage {
  constructor(storageBackend, asOptions) {
    _defineProperty(this, "_backend", void 0);

    _defineProperty(this, "_config", void 0);

    _defineProperty(this, "log", void 0);

    _defineProperty(this, "error", void 0);

    this._backend = storageBackend;
    this._config = asOptions; // off by default

    this.log = _defaults.noop;
    this.error = _defaults.noop;

    if (this._config.logger) {
      this.log = typeof this._config.logger === 'function' ? this._config.logger : _defaults.simpleLogger;
    }

    if (this._config.errorHandler) {
      this.error = typeof this._config.errorHandler === 'function' ? this._config.errorHandler : _defaults.simpleErrorHandler;
    }
  }

  async get(key, opts = null) {
    let value = null;

    try {
      this.log({
        action: 'read-single',
        key: key
      });
      value = await this._backend.getSingle(key, opts);
    } catch (e) {
      this.error(e);
    }

    return value;
  }

  async set(key, value, opts = null) {
    try {
      this.log({
        action: 'save-single',
        key,
        value
      });
      await this._backend.setSingle(key, value, opts);
    } catch (e) {
      this.error(e);
    }
  }

  async getMultiple(keys, opts = null) {
    let values = [];

    try {
      this.log({
        action: 'read-many',
        key: keys
      });
      values = await this._backend.getMany(keys, opts);
    } catch (e) {
      this.error(e);
    }

    return values;
  }

  async setMultiple(keyValues, opts = null) {
    try {
      this.log({
        action: 'save-many',
        value: keyValues
      });
      await this._backend.setMany(keyValues, opts);
    } catch (e) {
      this.error(e);
    }
  }

  async remove(key, opts = null) {
    try {
      this.log({
        action: 'delete-single',
        key
      });
      await this._backend.removeSingle(key, opts);
    } catch (e) {
      this.error(e);
    }
  }

  async removeMultiple(keys, opts = null) {
    try {
      this.log({
        action: 'delete-many',
        key: keys
      });
      await this._backend.removeMany(keys, opts);
    } catch (e) {
      this.error(e);
    }
  }

  async getKeys(opts = null) {
    let keys = [];

    try {
      this.log({
        action: 'keys'
      });
      keys = await this._backend.getKeys(opts);
    } catch (e) {
      this.error(e);
    }

    return keys;
  }

  async clearStorage(opts = null) {
    try {
      this.log({
        action: 'drop'
      });
      await this._backend.dropStorage(opts);
    } catch (e) {
      this.error(e);
    }
  } // todo: think how we could provide additional functions through AS, without returning the instance
  // some kind of extension-like functionality


  instance() {
    return this._backend;
  }

}

var _default = AsyncStorage;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,